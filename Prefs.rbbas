#tag ModuleProtected Module Prefs	#tag Method, Flags = &h0		Function BooleanAutoLogin() As Boolean		  dim theValue as Variant		  theValue = PreferenceValue("AutoLogin")		  If theValue <> Nil then		    Return theValue.BooleanValue		  Else		    Return false		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub BooleanAutoLogin(Assigns theValue as Boolean)		  PreferenceValue("AutoLogin")  = theValue		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function BooleanMelUpdates() As Boolean		  dim theValue as Variant		  theValue = PreferenceValue("MelUpdates")		  If theValue <> Nil then		    Return theValue.BooleanValue		  Else		    Return false		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub BooleanMelUpdates(Assigns theValue as Boolean)		  PreferenceValue("MelUpdates")  = theValue		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function BooleanRememberPassword() As Boolean		  dim theValue as Variant		  theValue = PreferenceValue("RememberPassword")		  If theValue <> Nil then		    Return theValue.BooleanValue		  Else		    Return false		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub BooleanRememberPassword(Assigns theValue as Boolean)		  PreferenceValue("RememberPassword")  = theValue		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function ColorTestValue() As Color		  dim theValue as Variant		  theValue = PreferenceValue("ColorTestValue")		  If theValue <> Nil then		    Return theValue.ColorValue		  Else		    Return &c000000		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub ColorTestValue(Assigns theValue as Color)		  PreferenceValue("ColorTestValue")  = theValue		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function DateTestValue() As Date		  dim theValue as Variant		  theValue = PreferenceValue("DateTestValue")		  If theValue <> Nil then		    Return theValue.DateValue		  Else		    Return new Date		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub DateTestValue(Assigns theValue as Date)		  PreferenceValue("DateTestValue")  = theValue		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function DoubleTestValue() As Double		  dim theValue as Variant		  theValue = PreferenceValue("DoubleTestValue")		  If theValue <> Nil then		    Return theValue.DoubleValue		  Else		    Return 0.0		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub DoubleTestValue(Assigns theValue as Double)		  PreferenceValue("DoubleTestValue")  = theValue		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function FolderItemTestValue() As FolderItem		  dim aliasData as Variant		  		  aliasData = PreferenceValue("FolderItemTestValue")		  If aliasData <> Nil then		    Return GetFolderItem(DecodeBase64(aliasData.StringValue))		  Else		    Return nil		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub FolderItemTestValue(Assigns theValue as FolderItem)		  If theValue <> nil then		    dim aliasData as String		    aliasData = theValue.GetSaveInfo(nil, 0)		    aliasData = EncodeBase64(aliasData, 0)		    PreferenceValue("FolderItemTestValue") =  aliasData		  Else		    If PrefsFolder <> Nil  and PrefsFolder.Child("FolderItemTestValue") <> Nil then		      PrefsFolder.Child("FolderItemTestValue").Delete		    End if		  End if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function IntegerTestValue() As Integer		  dim theInfo as Variant		  		  theInfo = PreferenceValue("IntegerTestValue")		  If theInfo <> Nil then		    Return theInfo.IntegerValue		  Else		    Return 15432		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub IntegerTestValue(Assigns theValue as Integer)		  PreferenceValue("IntegerTestValue") = theValue		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Sub LogMessage(theMessage as String)		  //add your own code here		  		  break		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function PreferencesCache() As Dictionary		  Static d as new Dictionary		  Return d		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Function PreferenceValue(prefName as String) As Variant		  If PrefsFolder Is Nil then		    Return Nil		  End if		  		  If not PreferencesCache.HasKey(prefName) then		    dim f as FolderItem = PrefsFolder.Child(prefName)		    If f.Exists then		      dim b as BinaryStream = f.OpenAsBinaryFile(false)		      If b <> Nil then		        dim theValue as Variant		        theValue = b.Read(b.Length)		        b = nil		        PreferencesCache.Value(prefName) = theValue		      Else		        LogMessage "Unable to read preferences file '" + prefName + "'."		      End if		    Else		      //no preference set		    End if		  End if		  		  If PreferencesCache.HasKey(prefName) then		    Return PreferencesCache.Value(prefName)		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h21		Private Sub PreferenceValue(prefName as String, Assigns theValue as Variant)		  if prefName = "" then		    return		  end if		  if theValue Is nil then		    return		  end if		  if PrefsFolder Is nil then		    return		  end if		  		  		  //save new data to temp file		  dim newTempFile as FolderItem = PrefsFolder.Child(Format(1000000000000*Rnd, "############"))		  if newTempFile Is nil then		    LogMessage "Unable to save preference '" + prefName + "'; could not get a reference to a temporary file."		    return		  end if		  		  dim b as BinaryStream = newTempFile.CreateBinaryFile("text")		  if b Is nil then		    LogMessage "Unable to save preference '" + prefName + "'; error " + Str(newTempFile.LastErrorCode) + "."		    return		  end if		  b.Write theValue.StringValue		  b = nil		  		  dim currentFile as FolderItem = PrefsFolder.Child(prefName)		  if currentFile Is nil then		    LogMessage "Unable to save preference '" + prefName + "'; could not get a non-nil reference to the file."		    return		  end if		  		  dim oldTempFile as FolderItem = PrefsFolder.Child(Format(1000000000000*Rnd, "############"))		  if oldTempFile Is nil  then		    LogMessage "Unable to save preference '" + prefName + "'; could not get a reference to a temporary file."		    return		  end if		  		  if currentFile.Exists then		    currentFile.CopyFileTo oldTempFile		    if currentFile.LastErrorCode <> 0 then		      LogMessage "Unable to save preference '" + prefName + "'; error " + Str(currentFile.LastErrorCode) + "."		      return		    end if		    currentFile.Delete		  end if		  		  		  newTempFile.MoveFileTo currentFile		  if currentFile.Exists then		    oldTempFile.Delete		    PreferencesCache.Value(prefName) = theValue		  Else		    if oldTempFile.Exists then //attempt to undo move		      oldTempFile.CopyFileTo currentFile		    end if		    LogMessage "Unable to save preference '" + prefName + "'; error " + Str(currentFile.LastErrorCode) + "."		  end if		  oldTempFile.Delete		  newTempFile.Delete		  		  		End Sub	#tag EndMethod	#tag Method, Flags = &h21		Private Function PrefsFolder() As FolderItem		  Const FolderName = "com.MALUpdaterOSXGUI"		  		  If SpecialFolder.Preferences Is Nil or NOT SpecialFolder.Preferences.Exists then		    LogMessage "The user preferences folder doesn't exist and could not be created."		    Return nil		  End if		  		  dim f as FolderItem = SpecialFolder.Preferences.Child(FolderName)		  If f Is Nil then		    LogMessage "The application preferences folder could not be found; it may be a permissions problem."		    Return nil		  End if		  		  If NOT f.Exists then		    f.CreateAsFolder		  End if		  If f.Exists then		    If f.Directory then		      Return f		    Else		      LogMessage "A file with the same name as the preferences folder already exists."		      Return nil		    End if		  Else		    LogMessage "A preferences folder for the application could not be created; error " + Str(f.LastErrorCode) + "."		    Return nil		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub RetrieveWindowPosition(windowName as String, w as Window)		  If windowName = "" or w is Nil then		    Return		  End if		  		  dim v as Variant		  v = PreferenceValue(windowName)		  If v <> Nil then		    dim settings as String		    settings = v.StringValue		    dim d as new Dictionary		    For i as Integer = 1 to CountFields(settings, Chr(13))		      dim row as String		      row = NthField(settings, Chr(13), i)		      d.Value(NthField(row, Chr(9), 1)) = NthField(row, Chr(9), 2)		    Next		    If d.HasKey("top") then		      w.Top = d.Value("top").IntegerValue		    End if		    If d.HasKey("left") then		      w.Left = d.Value("left").IntegerValue		    End if		    If d.HasKey("width") then		      w.Width = d.Value("width").IntegerValue		    End if		    If d.HasKey("height") then		      w.Height = d.Value("height").IntegerValue		    End if		  Else		    //		  End if		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub SaveWindowPosition(windowName as String, w as Window)		  If windowName = "" or w is Nil then		    Return		  End if		  		  dim settings as String		  dim tab as String		  		  tab = Encodings.ASCII.Chr(9)		  settings = "top" + tab + Str(w.Top) + Chr(13)		  settings = settings + "left" + tab + Str(w.Left) + Chr(13)		  settings = settings + "width" + tab + Str(w.width) + Chr(13)		  settings = settings + "height" + tab + Str(w.Height)		  PreferenceValue(windowName) = settings		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function StringMelAuth() As String		  dim theInfo as Variant		  		  theInfo = PreferenceValue("MelUsername")		  If theInfo <> Nil then		    Return DefineEncoding(theInfo.StringValue, Encodings.UTF8)		  Else		    Return ""		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub StringmelAuth(Assigns theValue as String)		  PreferenceValue("melusername") = theValue		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function StringPassword() As String		  dim theInfo as Variant		  		  theInfo = PreferenceValue("Password")		  If theInfo <> Nil then		    Return DefineEncoding(theInfo.StringValue, Encodings.UTF8)		  Else		    Return ""		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub StringPassword(Assigns theValue as String)		  PreferenceValue("Password") = theValue		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Sub StringTestValue(Assigns theValue as String)		  PreferenceValue("StringTestValue") = theValue		End Sub	#tag EndMethod	#tag Method, Flags = &h0		Function StringUsername() As String		  dim theInfo as Variant		  		  theInfo = PreferenceValue("Username")		  If theInfo <> Nil then		    Return DefineEncoding(theInfo.StringValue, Encodings.UTF8)		  Else		    Return ""		  End if		End Function	#tag EndMethod	#tag Method, Flags = &h0		Sub StringUsername(Assigns theValue as String)		  PreferenceValue("Username") = theValue		End Sub	#tag EndMethod	#tag Note, Name = Read Me		SimplePrefs 1.1		3/29/2007		<http://www.declareSub.com/>						SimplePrefs is a module that allows you to save and retrieve preference settings.  This module works as follows.		For each preference, you write get/set methods that call the private PreferenceValue methods.  These method take a string key		that is used as the name of the file in which the information is stored.		Data is stored in the brute-force format of a file for each preference, and all files are stored in a folder 		in the OS preferences folder.				The function PrefsFolder returns the folder in which preference files are stored.  You should modify		the first line				Const FolderName = "com.foo.test"				of the method with the folder name of your choice.				When storing string values, note that it's your job to deal with encodings.  I opted not to do it so as		to keep the data format simple.  Mostly, your strings will either be encoded in UTF-8, or have nil encoding (i.e. binary 		data).  I suggest encoding binary data using EncodeBase64 as in the example FolderItemTestValue method.  This keeps the pref file		readable by text editors.  For strings with any other encoding, simply convert it to UTF-8 before storing and set the encoding to		UTF-8 when retrieving.						---------		Change Notes				1.1				Temp files are now created and moved around correctly.  Thanks to Geoff Evans for pointing out the problem.	#tag EndNote	#tag ViewBehavior		#tag ViewProperty			Name="Index"			Visible=true			Group="ID"			InitialValue="-2147483648"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Left"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Name"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Super"			Visible=true			Group="ID"			InheritedFrom="Object"		#tag EndViewProperty		#tag ViewProperty			Name="Top"			Visible=true			Group="Position"			InitialValue="0"			InheritedFrom="Object"		#tag EndViewProperty	#tag EndViewBehaviorEnd Module#tag EndModule